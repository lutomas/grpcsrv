// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: grpcsrv/v1/grpcsrv.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TheSocialRobot_EventStream_FullMethodName = "/thesocialrobot.TheSocialRobot/EventStream"
)

// TheSocialRobotClient is the client API for TheSocialRobot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TheSocialRobotClient interface {
	EventStream(ctx context.Context, opts ...grpc.CallOption) (TheSocialRobot_EventStreamClient, error)
}

type theSocialRobotClient struct {
	cc grpc.ClientConnInterface
}

func NewTheSocialRobotClient(cc grpc.ClientConnInterface) TheSocialRobotClient {
	return &theSocialRobotClient{cc}
}

func (c *theSocialRobotClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (TheSocialRobot_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TheSocialRobot_ServiceDesc.Streams[0], TheSocialRobot_EventStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &theSocialRobotEventStreamClient{stream}
	return x, nil
}

type TheSocialRobot_EventStreamClient interface {
	Send(*ClientEvent) error
	Recv() (*ServerEvent, error)
	grpc.ClientStream
}

type theSocialRobotEventStreamClient struct {
	grpc.ClientStream
}

func (x *theSocialRobotEventStreamClient) Send(m *ClientEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *theSocialRobotEventStreamClient) Recv() (*ServerEvent, error) {
	m := new(ServerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TheSocialRobotServer is the server API for TheSocialRobot service.
// All implementations should embed UnimplementedTheSocialRobotServer
// for forward compatibility
type TheSocialRobotServer interface {
	EventStream(TheSocialRobot_EventStreamServer) error
}

// UnimplementedTheSocialRobotServer should be embedded to have forward compatible implementations.
type UnimplementedTheSocialRobotServer struct {
}

func (UnimplementedTheSocialRobotServer) EventStream(TheSocialRobot_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}

// UnsafeTheSocialRobotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TheSocialRobotServer will
// result in compilation errors.
type UnsafeTheSocialRobotServer interface {
	mustEmbedUnimplementedTheSocialRobotServer()
}

func RegisterTheSocialRobotServer(s grpc.ServiceRegistrar, srv TheSocialRobotServer) {
	s.RegisterService(&TheSocialRobot_ServiceDesc, srv)
}

func _TheSocialRobot_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TheSocialRobotServer).EventStream(&theSocialRobotEventStreamServer{stream})
}

type TheSocialRobot_EventStreamServer interface {
	Send(*ServerEvent) error
	Recv() (*ClientEvent, error)
	grpc.ServerStream
}

type theSocialRobotEventStreamServer struct {
	grpc.ServerStream
}

func (x *theSocialRobotEventStreamServer) Send(m *ServerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *theSocialRobotEventStreamServer) Recv() (*ClientEvent, error) {
	m := new(ClientEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TheSocialRobot_ServiceDesc is the grpc.ServiceDesc for TheSocialRobot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TheSocialRobot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thesocialrobot.TheSocialRobot",
	HandlerType: (*TheSocialRobotServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _TheSocialRobot_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcsrv/v1/grpcsrv.proto",
}
